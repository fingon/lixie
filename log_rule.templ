package main

import "github.com/fingon/lixie/data"
import "fmt"
import "strconv"

templ LogRuleEdit(rule data.LogRule, rules *LogRuleListModel, logs *LogListModel) {
  @Base(TopLevelLogRule, ruleTitle(rule)) {
  <form action={logRuleEdit.URL()}>
    <input type="hidden" name={idKey} value={ruleIdString(rule)} />
    <input type="hidden" name={versionKey} value={strconv.Itoa(rule.Version)} />
    @Row("add-new") {
      @Col(2) {
        <input class="btn btn-secondary"  type="submit" name={actionAdd} value="Add field" />
      }
      @Col(2) {
        <input class="btn btn-primary" type="submit" name={actionSave}  value="Save" />
      }
      if rule.Id > 0 {
      @Col(6)
      @Col(2) {
        <a class="btn btn-danger" href={ruleLink(rule.Id, "delete")}>Delete</a>
      }
      }
    }
    @Row("state") {
      @Col(2) {
        <label for={hamKey} class="form-label">Ham</label>
        <input class="btn btn-secondary" type="checkbox" name={hamKey}
               checked?={rule.Ham} value="Ham" />
      }
      @Col(2) {
        <label for={disabledKey} class="form-label">Disabled</label>
        <input class="btn btn-secondary" type="checkbox" name={disabledKey}
               checked?={rule.Disabled} value="Disabled" />
        }
      @Col(8) {
        <label for={commentKey} class="form-label">Comment</label>
        <input class="form-text" type="text" name={commentKey}
               value={rule.Comment} placeholder="Comment, if any" />
        }

    }
    for i, matcher := range rule.Matchers {
      @Row(fmt.Sprintf("row-%d", i)) {
        @Col(1) {
          <input type="submit" class="btn btn-danger" name={fieldId(i, deleteField)} value="Delete" />
        }
        @Col(2) {
          <input class="form-text" type="text" name={fieldId(i, fieldField)}
                 hx-trigger="change, keyup delay:200ms changed"
                 hx-post={logRuleEdit.Path}
                 hx-select="#logs"
                 hx-swap="outerHTML"
                 hx-target="#logs"
                 value={matcher.Field} placeholder="Field name to match" />
        }
        @Col(1) {
          <select name={fieldId(i, opField)}
                  hx-post={logRuleEdit.Path}
                  hx-select="#logs"
                  hx-swap="outerHTML"
                  hx-target="#logs"
                  hx-trigger="change"
                  >
            <option value="=" selected?={matcher.Op=="="}>=</option>
            <option value="=~" selected?={matcher.Op=="=~"}>=~</option>
          </select>
        }
        @Col(8) {
          <input class="form-text" type="text" name={fieldId(i, valueField)}
                 hx-trigger="change, keyup delay:200ms changed"
                 hx-post={logRuleEdit.Path}
                 hx-select="#logs"
                 hx-swap="outerHTML"
                 hx-target="#logs"
                 value={matcher.Value} placeholder="Value of the operation" />
        }
      }
    }
  </form>
  if rules != nil {
    <br />
    @Row("overlapping-rules") {
      @Col(12) {
          if len(rules.LogRules) > 0 {
            <h4>{strconv.Itoa(len(rules.LogRules))} conflicting rules:</h4>
            @LogRuleListTable(*rules)
        }
      }
    }
  }
  if logs != nil {
    <br />
    @Row("logs") {
      @Col(12) {
        if len(logs.Logs) > 0 {
          <h4>{strconv.Itoa(logs.FilteredCount)} matching logs out of
            {strconv.Itoa(logs.TotalCount)}:
          </h4>
          @LogListTable(*logs)
        } else {
          No matching logs.
        }
      }
    }
  }
  }
}

templ LogRuleMatchersTable(rule data.LogRule) {
  <table class="table table-hover">
    <tbody>
      for _, matcher := range rule.Matchers {
        <tr>
          <td style="width:10%">{matcher.Field}</td>
          <td style="width:10em">{matcher.Op}</td>
          <td><div class="float-end">{matcher.Value}</div></td>
        </tr>
      }
    </tbody>
  </table>
}


templ LogRuleListTable(m LogRuleListModel) {
  <table class="table table-hover">
    <thead>
      <th scope="col">#</th>
      <th scope="col">State</th>
      if m.DB != nil {
      <th scope="col">Matches</th>
      }
      <th scope="col">Matchers</th>
      <th scope="col">Comment</th>
      <th scope="col">Actions</th>
    </thead>
    <tbody>
      for _, rule := range m.LogRules {
        <tr class="logrule">
          <th scope="row">
            {strconv.Itoa(rule.Id)}
          </th>
          <td scope="row">
            v{strconv.Itoa(rule.Version)}
            if rule.Disabled {
              Disabled
            } else {
              Enabled
            }
            if rule.Ham {
              Ham
            } else {
              Spam
            }
          </td>
          if m.DB != nil {
          <td>
            {strconv.Itoa(m.DB.RuleCount(rule.Id))}
          </td>
          }
          <td class="table-primary">
            @LogRuleMatchersTable(*rule)
          </td>
          <td>
            {rule.Comment}
          </td>
          <td class="table-secondary">
            <div class="position-relative">
              <a class="btn btn-primary" href={ruleLink(rule.Id, "edit")}>Edit</a>
              <a class="btn btn-danger" href={ruleLink(rule.Id, "delete")}>Delete</a>
            </div>
          </td>
        </tr>
      }
      if m.HasMore {
      <tr class="logrule">
        <td colspan="5">
          <span hx-target="closest tr"
                hx-trigger="revealed"
                hx-swap="outerHTML"
                hx-select="tr.logrule"
                hx-get={m.NextLinkString()}>
            Loading More...
          </span>
        </td>
      </tr>
      }
    </tbody>
  </table>
}

templ LogRuleList(m LogRuleListModel) {
  @Base(TopLevelLogRule, "Log rule list") {
    @Row("rule-add") {
      @Col(2) {
        <a class="btn btn-secondary" href={logRuleEdit.URL()}>Add rule</a>
      }
    }
    @Row("rules") {
      @Col(12) {
        @LogRuleListTable(m)
      }
    }
  }
}
