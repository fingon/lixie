package main

import "strconv"

templ LogList(m LogListModel) {
  @Base(TopLevelLog, "Log list") {
    @Row("refresh-and-count") {
      @Col(6) {
        if m.Config.AutoRefresh {
          <a class="btn btn-primary" href={m.Config.WithAutoRefresh(false).ToLink()}>Turn off autorefresh</a>
          <div hx-get={m.Config.ToLinkString()}
               hx-trigger="every 1s"
               hx-target="#logs"
               hx-select="#logs" />
        } else {
          <a class="btn btn-primary" href={m.Config.WithAutoRefresh(true).ToLink()}>Turn on autorefresh</a>
          <a class="btn btn-primary" href={m.Config.ToLink()}>Refresh</a>
        }
      }
    }
    @Row("logs") {
      @Col(12) {
        if len(m.Logs) > 1 {
          {strconv.Itoa(len(m.Logs))} logs and
          {strconv.Itoa(len(m.Spam))} spam covering
          {strconv.Itoa(int((m.Logs[0].Timestamp-m.Logs[len(m.Logs)-1].Timestamp)/1e9))}
          seconds
        } else if len(m.Spam) > 1 {
          {strconv.Itoa(len(m.Spam))} spam covering
          {strconv.Itoa(int((m.Spam[0].Timestamp-m.Spam[len(m.Spam)-1].Timestamp)/1e9))}
          seconds
        }
        <table class="table">
          <thead>
            if !m.Config.AutoRefresh {
            <th scope="col">Op</th>
            }
            <th scope="col">Time</th>
            <th scope="col">Stream</th>
            <th scope="col">Fields</th>
            <th scope="col">Message</th>
          </thead>
          <tbody>
            for _, log := range m.Logs {
              <tr id={log.IdString()}>
                if !m.Config.AutoRefresh {
                <td>
                  <div class="btn-group">
                    <a class="btn btn-primary btn-sm" href={logLink(log, "spam")}>-</a>
                    if m.LogVerdict(log) != LogVerdictHam {
                      <a class="btn btn-primary btn-sm" href={logLink(log,
                         "ham")}>!</a>
                    }
                  </div>
                </td>
                }
                <td>{log.Time.Format("15:04:05.000")}</td>
                <td>
                  if m.Config.Expand != log.Hash() {
                    source={log.Stream["source"]}
                    <a href={m.Config.WithExpand(log.Hash()).ToLink()}>
                      +{strconv.Itoa(len(log.StreamKeys)-1)}
                    </a>
                  } else {
                    <a href={m.Config.WithExpand(0).ToLink()}>-</a>
                    for _, k := range log.StreamKeys {
                      <p>{k}={log.Stream[k]}</p>
                    }
                 }

                </td>
                <td>
                  if m.Config.Expand != log.Hash() {
                    <a href={m.Config.WithExpand(log.Hash()).ToLink()}>
                      +{strconv.Itoa(len(log.FieldsKeys))}
                    </a>
                  } else {
                    <a href={m.Config.WithExpand(0).ToLink()}>-</a>
                    for _, k := range log.FieldsKeys {
                      <p>{k}={toJson(log.Fields[k])}</p>
                    }
                  }
                </td>
                <td>
                  if m.LogVerdict(log) == LogVerdictHam {
                    <b>{log.Message}</b>
                  } else {
                    {log.Message}
                  }
                </td>
              </tr>
            }
          </tbody>
        </table>
      }
    }
  }
}
