package main

import "github.com/fingon/lixie/data"
import "strconv"

templ LogListRuleLink(rule *data.LogRule) {
  if rule != nil {
    <a href={ruleLink(rule.Id, "edit")}>{strconv.Itoa(rule.Id)}</a>
  }
}

templ LogListTable(m LogListModel) {
  <table class="table">
    <thead>
      if !m.Config.AutoRefresh && !m.DisableActions {
        <th scope="col">Op</th>
      }
      <th scope="col">Time</th>
      <th scope="col">Stream</th>
      <th scope="col">Fields</th>
      <th scope="col">Rule</th>
      <th scope="col">Message</th>
    </thead>
    <tbody>
      for _, log := range m.Logs {
        <tr id={log.IdString()}>
          if !m.Config.AutoRefresh {
          <td>
            <div class="btn-group">
              if m.LogVerdict(log) != data.LogVerdictSpam {
                <a class="btn btn-primary btn-sm" href={logLink(log, "spam")}>-</a>
              }
              if m.LogVerdict(log) != data.LogVerdictHam {
                <a class="btn btn-primary btn-sm" href={logLink(log, "ham")}>!</a>
              }
            </div>
          </td>
          }
          <td>{log.Time.Format("15:04:05.000")}</td>
          <td>
            if m.Config.Expand != log.Hash() && !m.DisableActions {
              {primaryStreamKey}={log.Stream[primaryStreamKey]}
              <a href={m.Config.WithExpand(log.Hash()).ToLink()}>
                +{strconv.Itoa(len(log.StreamKeys)-1)}
              </a>
            } else {
              <a href={m.Config.WithExpand(0).ToLink()}>-</a>
              for _, k := range log.StreamKeys {
                {k}={log.Stream[k]}<br/>
              }
           }
           </td>
          <td>
            if m.Config.Expand != log.Hash() && !m.DisableActions {
              <a href={m.Config.WithExpand(log.Hash()).ToLink()}>
                +{strconv.Itoa(len(log.FieldsKeys))}
              </a>
            } else {
              <a href={m.Config.WithExpand(0).ToLink()}>-</a>
              for _, k := range log.FieldsKeys {
                {k}={toJson(log.Fields[k])}<br/>
              }
            }
          </td>
          <td>
            @LogListRuleLink(m.LogToRule(log))
          </td>
          <td>
            if m.LogVerdict(log) == data.LogVerdictHam {
              <b>{log.Message}</b>
            } else if m.LogVerdict(log) == data.LogVerdictSpam {
              <em>{log.Message}</em>
            } else {
              {log.Message}
            }
          </td>
        </tr>
        }
        if len(m.Logs) == m.Limit && !m.Config.AutoRefresh && !m.DisablePagination {
        <tr>
          <td colspan="4">
            <span hx-target="closest tr"
                  hx-trigger="revealed"
                  hx-swap="outerHTML"
                  hx-select="tbody > tr"
                  hx-get={m.Config.WithBefore(m.Logs[len(m.Logs)-1].Hash()).ToLinkString()}>
              Loading More...
            </span>
          </td>
        </tr>
        }
    </tbody>
  </table>
}

templ LogList(m LogListModel) {
  @Base(TopLevelLog, "Log list") {
    @Row("refresh-and-count") {
      @Col(4) {
        if m.Config.AutoRefresh {
          <a class="btn btn-primary" href={m.Config.WithAutoRefresh(false).ToLink()}>Turn off autorefresh</a>
          <div hx-get={m.Config.ToLinkString()}
               hx-trigger="every 1s"
               hx-target="#container"
               hx-select="#container" />
        } else {
          <a class="btn btn-primary" href={m.Config.WithAutoRefresh(true).ToLink()}>Turn on autorefresh</a>
          <a class="btn btn-primary" href={m.Config.ToLink()}>Refresh</a>
        }
      }
      @Col(6) {
        <ul class="nav nav-pills">
          for verdict := range data.NumLogVerdicts {
            <li class="nav-item">
              if m.Config.Filter == verdict {
                <a class="nav-link active bg-success-subtle" href={m.Config.ToLink()}>
                  {data.LogVerdictToString(verdict)} filtered</a>
              } else {
                <a class="nav-link" href={m.Config.WithFilter(verdict).ToLink()}>
                  Filter {data.LogVerdictToString(verdict)}</a>
              }
            </li>
          }
        </ul>
      }
      @Col(2) {
        <div class="float-end">
          {strconv.Itoa(m.TotalCount)} log entries<br/>
          {strconv.Itoa(m.FilteredCount)} shown
        </div>
      }
    }
    @Row("logs") {
      @Col(12) {
        @LogListTable(m)
      }
    }
  }
}
